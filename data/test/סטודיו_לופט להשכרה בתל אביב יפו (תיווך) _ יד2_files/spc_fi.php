var firstSpcFetch={"status":"OK","geo":"IL","deviceDetected":1,"fiViewerId":"192bc6ce0802c5ff7ec67f146510084e","pageViewUniqueId":1538254210156949,"datasource":"LIVE","warnings":[],"options":{"hb_analytics":true,"cmp_enableintegration":false,"siteLang":"he","campaignLimitations":{},"prependScript":"\n\nfiQuery(window).on(\"SPCReturned\", function() {\n\t\/\/ This code is built on NOT refreshing the client manager\n\t\/\/ Refreshing the client manager will lead to unexpected results and issues\n\tFI.state.yad2Native = FI.state.yad2Native || {};\n\tFI.state.yad2Native.managePageLoadEvent = {\n\t\tpageHasLoaded : false,\n\t\tpageIsLoading : false,\n\t\tcurrentURL: window.location.toString(),\n\t\tprevURL: \"\",\n\t\tfailSafeCounter : 0,\n\t\tclearFunctions: {},\n\t\tinitFunctions: {},\n\t\tspinners: 'div.triple-spinner:visible,div.dfp-fullscreen-loader:visible',\n\t\tsetPageStartedLoading : FI.common.infra.setFIInterval(function() {\n\t\t\t$self = FI.state.yad2Native.managePageLoadEvent;\n\t\t\t\/\/ This method is based on looking at the loading icon of the site with combination of looking at the page URL \n\t\t\t\/\/ Fail safe is designed to prevent this interval from running for ever\n\t\t\t\/\/ Check if page started loading i.e. the page loading icon appeared OR if URL has changed \n\t\t\tif ($self.pageIsLoading == false && (fiQuery($self.spinners).length > 0 || window.location.toString() != $self.currentURL)) {\n\t\t\t\t\/\/ Well this means loading has commenced!\n\t\t\t\t$self.pageIsLoading = true;\n\t\t\t\t$self.pageHasLoaded = false;\n\t\t\t\t$self.prevURL = $self.currentURL;\n\t\t\t\t$self.currentURL = window.location.toString();\n\t\t\t\tfiQuery(window).trigger('FIPageStartedLoading', [{URLHasChanged: $self.prevURL == $self.currentURL, prevURL: $self.prevURL, currentURL: $self.currentURL}]);\n\t\t\t\t\/\/ Attach event page started loading \n\t\t\t}\n\t\t}, 1000, true, false),\n\t\tsetPageLoadEvent: function(e, URLHasChanged, prevURL, currentURL) {\n\t\t\t\/\/ Zero the fail\n\t\t\t$self = FI.state.yad2Native.managePageLoadEvent;\n\t\t\tFI.state.yad2Native.managePageLoadEvent.failSafeCounter = 0;\n\t\t\tFI.state.yad2Native.managePageLoadEvent.DOMReadyTrigger = FI.common.infra.setFIInterval(function() {\n\t\t\t\t$self.failSafeCounter++;\n\t\t\t\t\/\/ Check if DOM hasn't loaded yet\n\t\t\t\tif (fiQuery($self.spinners).length == 0 || $self.failSafeCounter > 30) {\n\t\t\t\t\t\/\/ Allow the general interval to work \n\t\t\t\t\t$self.pageIsLoading = false;\n\t\t\t\t\t\/\/ Dispatch the event \n\t\t\t\t\tfiQuery(window).trigger('FIPageHasLoaded', [{URLHasChanged: $self.prevURL == $self.currentURL, prevURL: $self.prevURL, currentURL: $self.currentURL}]);\n\t\t\t\t\t\/\/ Flag is true \n\t\t\t\t\t$self.pageHasLoaded = true;\n\t\t\t\t\t\/\/ Clear this interval \n\t\t\t\t\tFI.common.infra.clearFIInterval($self.DOMReadyTrigger);\n\t\t\t\t\t$self.currentURL = window.location.toString();\n\t\t\t\t}\n\t\t\t}, 300, true, false);\n\t\t},\n\t\tclearPreviousPage: function() {\n\t\t\t$self = FI.state.yad2Native.managePageLoadEvent;\n\t\t\t$self.clearFunctionsToRemoveList = [];\n\t\t\t\/\/ This is ran when ever a navigation is detected \n\t\t\tFI.console.log('Seems we started navigation to another page...');\n\t\t\t\/\/ Adapt all placements \n\t\t\tfiQuery.each($self.clearFunctions, function(i,clearFunction) {\n\t\t\t\t\/\/ Excute clear functions \n\t\t\t\tif (typeof clearFunction == \"function\") {\n\t\t\t\t\tclearFunction();\n\t\t\t\t\tFI.console.log('Excuted ' + i + ' clear function');\n\t\t\t\t} else {\n\t\t\t\t\tFI.console.log('ERROR: clear function ' + i + ' was not excuted as it is not a function');\n\t\t\t\t}\n\t\t\t\t\/\/ Delete the function if the id is string (because it is an instance id which means they are no longer relevant)\n\t\t\t\tif (isNaN(i)) \n\t\t\t\t\t$self.clearFunctionsToRemoveList.push(i);\n\t\t\t});\n\t\t\t\/\/ Remove all remove indexes \n\t\t\tfiQuery.each($self.clearFunctionsToRemoveList, function(i, removeIndex) {\n\t\t\t\tdelete $self.clearFunctions[removeIndex];\n\t\t\t});\n\t\t},\n\t\tinitNewPage: function() {\n\t\t\t$self = FI.state.yad2Native.managePageLoadEvent;\n\t\t\t$self.initFunctionsToRemoveList = [];\n\t\t\t\/\/ This is ran once page has fully loaded \n\t\t\tFI.console.log('Seems the page has fully loaded...');\n\t\t\t\/\/ Re-run the tracking \n\t\t\tFI.g_clientManager.trackingManager._reset();\n\t\t\tFI.g_clientManager.trackingManager.trackPageView();\n\t\t\t\/\/ Adapt all placements \n\t\t\tfiQuery.each(FI.g_clientManager.placementQueue, function(placementId,placement) {\n\t\t\t\t\/\/ Destroy placement if needed\n\t\t\t\tif (placement.options.refreshOnRouteChange != false) placement.destroy();\n\t\t\t});\n\t\t\tfiQuery.each($self.initFunctions, function(i,initFunction) {\n\t\t\t\t\/\/ Excute clear functions \n\t\t\t\tif (typeof initFunction == \"function\") {\n\t\t\t\t\tinitFunction();\n\t\t\t\t\tFI.console.log('Excuted ' + i + ' init function');\n\t\t\t\t} else {\n\t\t\t\t\tFI.console.log('ERROR: init function ' + i + ' was not excuted as it is not a function');\n\t\t\t\t}\n\t\t\t\t\/\/ Delete the function if the id is string (because it is an instance id which means they are no longer relevant)\n\t\t\t\tif (isNaN(i)) \n\t\t\t\t\t$self.initFunctionsToRemoveList.push(i);\n\t\t\t});\n\t\t\t\/\/ Remove all remove indexes \n\t\t\tfiQuery.each($self.initFunctionsToRemoveList, function(i, removeIndex) {\n\t\t\t\tdelete $self.initFunctions[removeIndex];\n\t\t\t});\n\t\t}\n\t};\n\t\/\/ Attach the events\n\tfiQuery(window).on('FIPageStartedLoading', FI.state.yad2Native.managePageLoadEvent.setPageLoadEvent);\n\tfiQuery(window).on('FIPageStartedLoading', FI.state.yad2Native.managePageLoadEvent.clearPreviousPage);\n\tfiQuery(window).on('FIPageHasLoaded', FI.state.yad2Native.managePageLoadEvent.initNewPage);\n\n\t\/\/ This property will be used to by pass test conditions like website section and AB test values in order to render the test \n\tFI.state.yad2Native.isTesting = window.location.href.indexOf(\"fi_testing\") != -1;\n\n\tFI.state.yad2Native.injectMacrosToNativeTemplate = function(placementId, template, dfpVaraibles) {\n\t\tvar $newTemplate = fiQuery(template);\n\t\t\/\/ Set non content parameters\n\t\t$newTemplate\n\t\t\t.find(\"[name=image]\")\n\t\t\t.attr(\"src\", dfpVaraibles.image);\n\t\t$newTemplate\n\t\t\t.find(\"[name=clickURL]\")\n\t\t\t.attr(\n\t\t\t\t\"target\",\n\t\t\t\tdfpVaraibles.new_window == 1 ? \"_blank\" : \"_top\"\n\t\t\t)\n\t\t\t.attr(\n\t\t\t\t\"href\",\n\t\t\t\t(FI.g_clientManager.placementQueue[placementId] && FI.g_clientManager.placementQueue[placementId].instances[0] && FI.g_clientManager.placementQueue[placementId]\n      .instances[0].creative ? FI.g_clientManager.placementQueue[placementId].instances[0].creative.clickUrl + dfpVaraibles.dfpClickURL + dfpVaraibles.clickURL : dfpVaraibles.dfpClickURL + dfpVaraibles.clickURL)\n\t\t\t);\n\n\t\t\/\/ Set content elements\n\t\tfiQuery.each(dfpVaraibles, function(key, contentItem) {\n\t\t\tswitch (key) {\n\t\t\t\tcase \"image\":\n\t\t\t\tcase \"clickURL\":\n\t\t\t\tcase \"new_window\":\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$newTemplate\n\t\t\t\t\t\t.find(\"[name=\" + key + \"]\")\n\t\t\t\t\t\t.text(contentItem);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t\tif (localStorage.apdAdmin == 1)\n\t\t\tconsole.log(\"New FI native element injected\");\n\t\treturn $newTemplate;\n\t};\n\nFI.state.yad2Native.getConstantDFPVAr = function(responseText, constDFPVar) {\n\treturn responseText\n\t\t.split(constDFPVar)[1]\n\t\t.split(\";\")[0]\n\t\t.split(\" = \")[1]\n\t\t.replace('\"', \"\")\n\t\t.replace('\"', \"\")\n\t\t.replace(\"'\", \"\")\n\t\t.replace(\"'\", \"\");\n}\nFI.state.yad2Native.getDynamicDFPVAr = function(responseText, dynamicDFPVar) {\n\treturn responseText\n\t\t.split(dynamicDFPVar)[1]\n\t\t.split('\",\\n\"')[0]\n\t\t.split(\" : \")[1]\n\t\t.replace('\"', \"\");\n}\nFI.state.yad2Native.getCustomDFPVarFromResponseHTML = function(responseText, varaibles) {\n\tvar dfpVar = {};\n\tfor (varaible in varaibles) {\n\t\tdfpVar[varaible] = FI.state.yad2Native.getDynamicDFPVAr(responseText, varaible);\n\t}\n\tdfpVar.clickURL = FI.state.yad2Native.getConstantDFPVAr(responseText, 'clickURL');\n\tdfpVar.dfpClickURL = FI.state.yad2Native.getConstantDFPVAr(responseText, 'dfpClickURL');\n\tdfpVar.adUnitId = FI.state.yad2Native.getConstantDFPVAr(responseText, 'adUnitId');\n\n\treturn dfpVar;\n};\n\n\tFI.state.yad2Native.sendEventToDateLayer = function(exp_name, variant, dfp_id) {\n\t\tvar dataCohort = \"-1\";\n\t\tif (\n\t\t\tvue &&\n\t\t\tvue.$store &&\n\t\t\tvue.$store.state &&\n\t\t\tvue.$store.state.feed &&\n\t\t\tvue.$store.state.feed.media &&\n\t\t\tvue.$store.state.feed.media.params &&\n\t\t\tvue.$store.state.feed.media.params.abtest\n\t\t) {\n\t\t\tdataCohort = vue.$store.state.feed.media.params.abtest;\n\t\t}\n\t\tdataLayer.push({\n\t\t\t\/\/ unique experiment name. example: \"sticky footer banner on mobile ad page cars\"\n\t\t\texp_name: exp_name,\n\t\t\t\/\/ 0 for users that got no demand\n\t\t\texp_variant: variant,\n\t\t\t\/\/ unique banner id -- DFP line item\n\t\t\texp_dfp_id: dfp_id,\n\t\t\tdfp_cohort: dataCohort,\n\t\t\tevent: \"GTM test to GA\"\n\t\t});\n\t\tFI.state.yad2Native.dateLayerEventSent = true;\n\t};\n\n    FI.state.yad2Native.FILogNtiveError = function(errorMessage, req) {\n\t\tif (localStorage.showLogForYad2 == \"true\" || localStorage.apdAdmin == 1)\n\t\t\t\tconsole.log(\"%cFI: %c\" + ((errorMessage != '' || typeof errorMessage != 'undefined') ? errorMessage : \"No AB test placement has returned therefor preforming no tests\"),\"padding: .15em .3em;vertical-align: baseline;border-radius: .25rem; margin:0.45em; font-weight:bold;color:white;background-color: blue;\",\"\");\n\t};\n\n    FI.state.yad2Native.FILogNtiveMessage = function(message) {\n\t\tif (localStorage.showLogForYad2 == \"true\" || localStorage.apdAdmin == 1)\n\t\t\t\tconsole.log(\"%cFI: %c\" + ((message != '' || typeof message != 'undefined') ? message : \"No AB test placement has returned therefor preforming no tests\"),\"padding: .15em .3em;vertical-align: baseline;border-radius: .25rem; margin:0.45em; font-weight:bold;color:white;background-color: blue;\",\"\");\n    };\n});\n","eventTracking":{"trackingDomains":[{"host":"tracking1.firstimpression.io","type":"full"}],"cookiename":"fitracking","probability":48,"trackScroll":1,"trackTimeOnPage":1},"visibilityTracking":{"enabled":true}},"sessionTracking":true,"GDPRApplies":false,"incognito":null,"placements":[{"id":112275,"width":1,"height":1,"event":"load","type":"static","selectorType":"css","selector":"body","includeTags":"","excludeTags":"","options":{"node":"div","adUnit":true,"animate":0,"position":"before","safeFrame":0,"morestylesJSON":{"clear":"both"},"disableTracking":true,"earlyStopSearch":0,"trackVisibility":{"enabled":false,"visibilityTime":1000,"visibilityPercent":50},"validationScript":"typeof window.vue == \"object\"","onDemandPlacement":{"timeoutAction":"show","passbackTimeout":1800,"countImpressionIfNoDemand":1,"waterfall":[{"bannerId":76614}]},"placementLimitation":100,"validationSelectorCheckOnce":0,"totalRenderedInstancesLimitation":0},"creatives":[{"id":76614,"cid":1022,"isHeaderBidding":"","requestLimitation":1,"logUrl":"https:\/\/cdn.firstimpression.io\/delivery\/lg.php?bannerid=76614&campaignid=1022&zoneid=112275&loc=%2Fitem%2F2o3vdg&cb=c7262c595f","clickUrl":"https:\/\/cdn.firstimpression.io\/delivery\/ck.php?oaparams=2__bannerid=76614__zoneid=112275__cb=c7262c595f__oadest=","width":1,"height":1,"timeoutAction":"show","passbackTimeout":1800,"countImpressionIfNoDemand":1,"filename":"","bannerContent":"<style>\ndiv.fi-double-middle-container + div {\n    display: none !important;\n}\n<\/style><script>\n    \/\/ Seperate the name space\n    FI.state._{apd-zoneid} = FI.state._{apd-zoneid} || {};\n    $namespace_{apd-zoneid} = FI.state._{apd-zoneid};\n    $yad2Native = FI.state.yad2Native;\n \n    \/\/ DO NOT EDIT ABOVE THIS LINE -------------------------------------------------------\n \n    $namespace_{apd-zoneid}.testName = \"Bottom Button - Hover\";\n    $namespace_{apd-zoneid}.snippetName = \"fi-desktop-image-plus-text-new-desktop-template-snippet\";\n    $namespace_{apd-zoneid}.snippetObjectKeys = {\n            template : \"template\",\n            image : \"image\",\n            imageFile : \"imageFile\",\n            lineOne : \"lineOne\",\n            lineTwo : \"lineTwo\",\n            lineThree : \"lineThree\",\n            additionalStyle : \"additionalStyle\",\n            new_window : \"new_window\"\n    };\n    \/\/ Set the Ad Unit path\n    $namespace_{apd-zoneid}.dfpPathArray = [\"Desktop_Bottom_1\", \"Desktop_Bottom_2\", \"Desktop_Bottom_3\", \"Desktop_Bottom_4\", \"Desktop_Bottom_5\", \"Desktop_Bottom_6\", \"Desktop_Bottom_7\"];\n    \/\/ Set the html template\n    $namespace_{apd-zoneid}.htmlTemplate = '<div id=\"fi-container_{apd-zoneid}\"><a name=\"clickURL\"><div class=\"fi-content-wrarpper\"><div class=\"fi-image\"><img name=\"image\"\/><\/div><div class=\"subtitle\" name=\"subtitle\"><\/div><div class=\"headline\" name=\"headline\"><\/div><\/div><\/div><style><\/style>';\n    \/\/ Add custom style tag to page if needed\n    $namespace_{apd-zoneid}.customStyle = '<style id=\"fi-style-{apd-zoneid}\"> div#fi-container_{apd-zoneid} {display: none;} div.boxes_row {display: flex;} div#dfp-container-Desktop_Bottom_1:hover { cursor: pointer;height: 146px; z-index: 6; box-shadow: 0 1px 6px 1px rgba(0, 0, 0, 0.4); box-shadow: 1 1px 6px 1px rgba(0, 0, 0, 0.31);} div#dfp-container-Desktop_Bottom_2:hover { cursor: pointer;height: 146px; z-index: 6; box-shadow: 0 1px 6px 1px rgba(0, 0, 0, 0.4); box-shadow: 1 1px 6px 1px rgba(0, 0, 0, 0.31);} div#dfp-container-Desktop_Bottom_3:hover { cursor: pointer;height: 146px; z-index: 6; box-shadow: 0 1px 6px 1px rgba(0, 0, 0, 0.4); box-shadow: 1 1px 6px 1px rgba(0, 0, 0, 0.31);} div#dfp-container-Desktop_Bottom_4:hover { cursor: pointer;height: 146px; z-index: 6; box-shadow: 0 1px 6px 1px rgba(0, 0, 0, 0.4); box-shadow: 1 1px 6px 1px rgba(0, 0, 0, 0.31);} div#dfp-container-Desktop_Bottom_5:hover { cursor: pointer;height: 146px; z-index: 6; box-shadow: 0 1px 6px 1px rgba(0, 0, 0, 0.4); box-shadow: 1 1px 6px 1px rgba(0, 0, 0, 0.31);} div#dfp-container-Desktop_Bottom_6:hover { cursor: pointer;height: 146px; z-index: 6; box-shadow: 0 1px 6px 1px rgba(0, 0, 0, 0.4); box-shadow: 1 1px 6px 1px rgba(0, 0, 0, 0.31);} div#dfp-container-Desktop_Bottom_7:hover { cursor: pointer;height: 146px; z-index: 6; box-shadow: 0 1px 6px 1px rgba(0, 0, 0, 0.4); box-shadow: 1 1px 6px 1px rgba(0, 0, 0, 0.31);} <\/style>';\n    \/\/ Add the test configuration\n    \/\/ $adHtml is the ad html already injected with dynamic params and ready to be appended to page\n    \/\/ currentDfpPath is the dfpPath from which the ad dynamic params were pulled\n    $namespace_{apd-zoneid}.injectAdIncludingTestConfiguration = function($adHtml, currentDfpPanth) {\n            \/\/ DON'T FORGET YOU NEED TO INJECT THE AD!\n            fiQuery('div.boxes_row').append($adHtml);\n    }\n    \/\/ Set the correct AB test values in which the test should appear\n    \/\/ Don't forget that id $yad2Native.isTesting the test shoulod appear anyway\n    $namespace_{apd-zoneid}.renderConsideringABtestValues = function() {\n        return $yad2Native.isTesting\n            || vue\n            && vue.$store\n            && vue.$store.state\n            && vue.$store.state.feed\n            && vue.$store.state.feed.media\n            && vue.$store.state.feed.media.params\n            \/\/ YOUR CUSTOM AB TEST VALUES BELOW\n            && vue.$store.state.feed.media.params.abtest >= 1\n            && vue.$store.state.feed.media.params.abtest <= 10\n            || fiQuery.cookie('abTestKey') >= 1\n            && fiQuery.cookie('abTestKey') <= 10\n            ;\n    };\n    \/\/ Set the correct website sections where the test should appear\n    \/\/ Don't forget that id $yad2Native.isTesting the test shoulod appear anyway\n    $namespace_{apd-zoneid}.renderConsideringURL = function(dfp) {\n        return $yad2Native.isTesting\n            \/\/ COMMENT IN THE SECTIONS YOU WANT TO TARGET\n            \/\/ || window.location.pathname.indexOf('\/realestate\/') == 0\n            \/\/ || window.location.pathname.indexOf('\/products\/') == 0\n            || window.location.pathname.indexOf('\/vehicles\/') == 0\n            ;\n    };\n    $namespace_{apd-zoneid}.testCustomLimitation = function() {\n        \/\/ Add your custom limitations here\n        return true;\n    };\n    $namespace_{apd-zoneid}.shouldRender = function() {\n        return $namespace_{apd-zoneid}.renderConsideringABtestValues() && $namespace_{apd-zoneid}.renderConsideringURL() && $namespace_{apd-zoneid}.testCustomLimitation();\n    };\n    \/\/ Push functions in order to clear page state on page navigation out\n    $yad2Native.managePageLoadEvent.clearFunctions[{apd-zoneid}] = function() {\n        \/\/ ADD YOUR DOM CLEARING CODE HERE\n    };\n    \/\/ Push functions in order to init the test when page has fully loaded\n    $yad2Native.managePageLoadEvent.initFunctions[{apd-zoneid}] = function() {\n        \/\/ ADD YOUR TEST INIT CODE HERE\n        if ($namespace_{apd-zoneid}.shouldRender()) {\n \n        }\n    };\n    \/\/ DO NOT EDIT BELOW THIS LINE -------------------------------------------------------\n \n    var googletag = googletag || {};\n    googletag.cmd = googletag.cmd || [];\n    $namespace_{apd-zoneid}.currentInstanceId = \"{apd-id}\";\n \n    if (window.fiOnce_{apd-zoneid} != true) {\n       \/\/ Make sure there is only one handler set\n       window.fiOnce_{apd-zoneid} = true;\n       \/\/ Set the DFP handler\n        googletag.cmd.push(function() {\n            googletag.pubads().addEventListener('slotRenderEnded', function(event) {\n                fiQuery.each($namespace_{apd-zoneid}.dfpPathArray, function(i, dfpPath) {\n                   if (event.slot.getAdUnitPath().indexOf(dfpPath) != -1 && $namespace_{apd-zoneid}.shouldRender()) {\n                        if (event.isEmpty) {\n                            \/\/ We got no demand\n                            $yad2Native.FILogNtiveMessage('No demand found for ' + $namespace_{apd-zoneid}.testName + ', path: ' + dfpPath);\n                        } else if ($namespace_{apd-zoneid}.shouldRender()) {\n                                \/\/ Add the style to make sure it looks good...\n                                if ($namespace_{apd-zoneid}.customStyle != '' && fiQuery('style#fi-style-{apd-zoneid}').length == 0)\n                                        fiQuery('body').append($namespace_{apd-zoneid}.customStyle);\n                                \/\/ Log it\n                                $yad2Native.FILogNtiveMessage('Demand found for ' + $namespace_{apd-zoneid}.testName + ', path: ' + dfpPath);\n                                \/\/ Extract creative componenets from HTML response and inject componenets to html template\n                                if (event.slot.getHtml().indexOf($namespace_{apd-zoneid}.snippetName) != -1) {\n                                    \/\/ Add an imp if you can\n                                    if (FI.g_clientManager.getInstance($namespace_{apd-zoneid}.currentInstanceId) !== null)\n                                        FI.g_clientManager.getInstance($namespace_{apd-zoneid}.currentInstanceId).trackAdCall();\n                                    if (event.slot.getHtml().indexOf('dfpClickURL') == -1)\n                                        responceText = event.slot.getHtml().split($namespace_{apd-zoneid}.snippetName)[1] + 'dfpClickURL = \"\";';\n                                    else\n                                        responceText = event.slot.getHtml().split($namespace_{apd-zoneid}.snippetName)[1];\n                                    var $html = $yad2Native.injectMacrosToNativeTemplate({apd-zoneid}, $namespace_{apd-zoneid}.htmlTemplate, $yad2Native.getCustomDFPVarFromResponseHTML (responceText, $namespace_{apd-zoneid}.snippetObjectKeys));\n                                    \/\/ Inject the ad to the right place and add any test configurations\n                                    $namespace_{apd-zoneid}.injectAdIncludingTestConfiguration($html, dfpPath);\n                                } else {\n                                    $yad2Native.FILogNtiveMessage('Demand found for ' + $namespace_{apd-zoneid}.testName + ', path: ' + dfpPath + '. But our snippet is missing, test is not set for this page');\n                                }\n                            } else {\n                                $yad2Native.FILogNtiveMessage('Demand found for ' + $namespace_{apd-zoneid}.testName + ', path: ' + dfpPath + '. But we are not running it because this is the wrong website section or becuase ad unit and section dont match');\n                            }\n                        }\n                });\n            });\n        });\n    } else if (window.fiOnce_{apd-zoneid} != true) {\n        $yad2Native.FILogNtiveMessage('Demand found for ' + $namespace_{apd-zoneid}.testName + ', path: ' + $namespace_{apd-zoneid}.dfpPathArray + '. But we are not running it because abtest value doesnt match test');\n    }\n    \/\/ Init the first page\n    $yad2Native.managePageLoadEvent.initFunctions[{apd-zoneid}]();\n<\/script>","contentType":"html","trackBiddingParams":1}]}]};